%%
[\t\n\r ]+ ;

// Terms
[0-9]+\.[0-9]+ "FloatingLit"
[0-9]+ "IntegerLit"
"#" [A-Fa-f]* "ColorLit"
[a-zA-Z][_a-zA-Z0-9]* "Ident"
"$"[a-zA-Z][_a-zA-Z0-9] "Atom"

// Groups
\' "Quote"
\" "DoubleQuote"

"/*" "MultiCommentOpen"
"*/" "MultiCommentClose"
"//" "Comment"

"(" "OpenParen"
")" "CloseParen"
"{" "OpenCurly"
"}" "CloseCurly"
"[" "OpenBracket"
"]" "CloseBracket"

"," "Comma"

// Assignment operators
"=" "Assign"
"+=" "AddAssign"
"-=" "SubAssign"
"/=" "DivAssign"
"*=" "MulAssign"
"&=" "AndAssign"
"|=" "OrAssign"
"^=" "BitXorAssign"
"&&=" "LogicalAndAssign"
"||=" "LogicalOrAssign"
"%=" "ModuloAssign"

// Operators
"!" "LogicalNot"
"#!" "Shebang"
"#" "Hash"
"%" "Modulo"
"&" "And"
"&&" "LogicalAnd"
"*" "Mul"
"**" "Exp"
"+" "Add"
"-" "Sub"
"->" "Arrow"
"." "Dot"
".." "Range"
"..." "Spread"
"/" "Div"
":" "HasType"
";" "Sequence"
"<" "Lt"
"<<" "LeftShift"
"<|" "LeftPipe"
"=>" "DoubleArrow"
">" "Gt"
">>" "RightShift"
"?" "Try"
"@" "GetAddress"
"^" "BitXor"
"|" "Or"
"|>" "RightPipe"
"||" "LogicalOr"
"~" "BitNot"

// "Quantification"
"λ" "Lambda"
"Π" "Pi"
"Σ" "Sigma"
"∀" "Forall"
"∃" "Exists"

// "Comparisons"
"==" "Eqs"
"!=" "NotEqs"
"<" "Lt"
">" "Gt"
"<=" "LtEqs"
">=" "GtEqs"

. "Unknown"
